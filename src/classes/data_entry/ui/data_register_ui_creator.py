"""
„Éá„Éº„ÇøÁôªÈå≤UI‰ΩúÊàê„É¢„Ç∏„É•„Éº„É´

„Éá„Éº„ÇøÁôªÈå≤Ê©üËÉΩ„ÅÆUIÊßãÁØâ„ÇíÊãÖÂΩì„Åó„Åæ„Åô„ÄÇ
"""

from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QLineEdit, QHBoxLayout, QTextEdit, QGroupBox, QComboBox, QSizePolicy, QMessageBox
)
from classes.data_entry.conf.ui_constants import DATA_REGISTER_FORM_STYLE
from PyQt5.QtGui import QFont
from PyQt5.QtCore import QTimer, Qt
import json
import os
from config.common import get_dynamic_file_path
from classes.data_entry.util.data_entry_forms import create_schema_form_from_path
from classes.data_entry.util.data_entry_forms_fixed import create_sample_form


def safe_remove_widget(layout, widget):
    """
    „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„ÇíÂÆâÂÖ®„Å´ÂâäÈô§„Åô„Çã„Éò„É´„Éë„ÉºÈñ¢Êï∞
    
    Args:
        layout: Ë¶™„É¨„Ç§„Ç¢„Ç¶„Éà
        widget: ÂâäÈô§„Åô„Çã„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà
    """
    if widget is None:
        return
    
    try:
        # „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„ÅåÊúâÂäπ„Åã„ÉÅ„Çß„ÉÉ„ÇØÔºàË¶™„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Åå„ÅÇ„Çã„Åã„ÅßÂà§ÂÆöÔºâ
        if widget.parent() is not None and layout:
            layout.removeWidget(widget)
        widget.deleteLater()
    except RuntimeError:
        # Êó¢„Å´ÂâäÈô§Ê∏à„Åø„ÅÆÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
        pass


def create_data_register_widget(parent_controller, title="„Éá„Éº„ÇøÁôªÈå≤", button_style=None):
    """
    „Éá„Éº„ÇøÁôªÈå≤„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Çí‰ΩúÊàê
    
    Args:
        parent_controller: Ë¶™„ÅÆUIController
        title: „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„ÅÆ„Çø„Ç§„Éà„É´
        button_style: „Éú„Çø„É≥„ÅÆ„Çπ„Çø„Ç§„É´
        
    Returns:
        QWidget: „Éá„Éº„ÇøÁôªÈå≤Áî®„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà
    """
    widget = QWidget()
    widget.setVisible(True)  # ÊòéÁ§∫ÁöÑ„Å´Ë°®Á§∫Ë®≠ÂÆö
    layout = QVBoxLayout()
    layout.setContentsMargins(15, 15, 15, 15)  # „Çà„ÇäÈÅ©Âàá„Å™‰ΩôÁôΩ
    layout.setSpacing(15)  # Ë¶ÅÁ¥†Èñì„ÅÆÈñìÈöî„ÇíÂ¢óÂä†
    
    if button_style is None:
        button_style = """
        background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                   stop: 0 #2196f3, stop: 1 #1976d2);
        color: white; 
        font-weight: bold; 
        border-radius: 8px;
        padding: 10px 16px;
        border: none;
        """
    

    # --- „Éá„Éº„Çø„Çª„ÉÉ„ÉàÈÅ∏Êäû ---

    # --- „Éá„Éº„Çø„Çª„ÉÉ„ÉàÈÅ∏Êäû„É©„Éô„É´„Éª„Éâ„É≠„ÉÉ„Éó„ÉÄ„Ç¶„É≥„Çí„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÊåáÂÆö„ÅßÊåøÂÖ• ---
    try:
        from classes.data_entry.util.data_entry_filter_checkbox import create_checkbox_filter_dropdown
        dataset_dropdown = create_checkbox_filter_dropdown(widget)
        dataset_dropdown.setMinimumWidth(450)
        if hasattr(dataset_dropdown, 'dataset_dropdown'):
            dataset_combo_font = QFont("Yu Gothic UI", 11)
            dataset_dropdown.dataset_dropdown.setFont(dataset_combo_font)
            dataset_dropdown.dataset_dropdown.setStyleSheet("QComboBox { font-size: 12px; padding: 4px; }")
        dataset_label = QLabel("üìä „Éá„Éº„Çø„Çª„ÉÉ„ÉàÈÅ∏Êäû")
        layout.insertWidget(0, dataset_label)
        layout.insertWidget(1, dataset_dropdown)
        parent_controller.dataset_dropdown = dataset_dropdown
    except ImportError as e:
        parent_controller.show_error(f"„Éï„Ç£„É´„Çø„ÅÆ„Ç§„É≥„Éù„Éº„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {e}")
        try:
            from classes.dataset.util.dataset_dropdown_util import create_dataset_dropdown_with_user
            from config.common import INFO_JSON_PATH, DATASET_JSON_PATH
            dataset_dropdown = create_dataset_dropdown_with_user(DATASET_JSON_PATH, INFO_JSON_PATH, widget)
            dataset_dropdown.setMinimumWidth(320)
            dataset_label = QLabel("üìä „Éá„Éº„Çø„Çª„ÉÉ„ÉàÈÅ∏Êäû")
            layout.insertWidget(0, dataset_label)
            layout.insertWidget(1, dataset_dropdown)
            parent_controller.dataset_dropdown = dataset_dropdown
        except Exception as fallback_e:
            parent_controller.show_error(f"„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éâ„É≠„ÉÉ„Éó„ÉÄ„Ç¶„É≥„ÇÇÂ§±Êïó: {fallback_e}")
            dataset_dropdown = QLabel("„Éá„Éº„ÇøÁôªÈå≤Ê©üËÉΩ„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì")
            layout.insertWidget(0, dataset_dropdown)
            parent_controller.dataset_dropdown = dataset_dropdown
    except Exception as e:
        parent_controller.show_error(f"„Éá„Éº„ÇøÁôªÈå≤ÁîªÈù¢„ÅÆ‰ΩúÊàê„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
        dataset_dropdown = QLabel("„Éá„Éº„ÇøÁôªÈå≤Ê©üËÉΩ„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì")
        layout.insertWidget(0, dataset_dropdown)
        parent_controller.dataset_dropdown = dataset_dropdown

    # --- Âü∫Êú¨ÊÉÖÂ†±„Éï„Ç£„Éº„É´„Éâ„Çª„ÉÉ„Éà„ÇíËøΩÂä†ÔºàÂ∏∏„Å´2Áï™ÁõÆÔºâ ---
    from .data_register_ui_creator import create_basic_info_group
    basic_info_group, basic_info_widgets = create_basic_info_group()
    layout.insertWidget(2, basic_info_group)
    parent_controller.data_name_input = basic_info_widgets["data_name"]
    parent_controller.basic_description_input = basic_info_widgets["data_desc"]
    parent_controller.experiment_id_input = basic_info_widgets["exp_id"]
    parent_controller.sample_reference_url_input = basic_info_widgets["url"]
    parent_controller.sample_tags_input = basic_info_widgets["tags"]

    # --- Âõ∫ÊúâÊÉÖÂ†±„Éï„Ç©„Éº„É†„ÅÆÂãïÁöÑÁîüÊàêÁî® ---
    schema_form_widget = None

    # comboÂèñÂæóÔºàdataset_dropdown„ÅÆÂûã„Å´„Çà„Å£„Å¶Áï∞„Å™„ÇãÔºâ
    if hasattr(parent_controller.dataset_dropdown, 'dataset_dropdown'):
        combo = parent_controller.dataset_dropdown.dataset_dropdown
    elif hasattr(parent_controller.dataset_dropdown, 'dataset_filter_widget') and hasattr(parent_controller.dataset_dropdown.dataset_filter_widget, 'dataset_dropdown'):
        combo = parent_controller.dataset_dropdown.dataset_filter_widget.dataset_dropdown
    elif isinstance(parent_controller.dataset_dropdown, QComboBox):
        combo = parent_controller.dataset_dropdown
    else:
        combo = None

    def on_dataset_changed(idx):
        nonlocal schema_form_widget
        if combo is None:
            return
        # --- Êó¢Â≠ò„ÅÆË©¶Êñô„Éï„Ç©„Éº„É†„Éª„Çπ„Ç≠„Éº„Éû„Éï„Ç©„Éº„É†„ÇíÂâäÈô§ ---
        if hasattr(parent_controller, 'sample_form_widget') and parent_controller.sample_form_widget:
            safe_remove_widget(layout, parent_controller.sample_form_widget)
            parent_controller.sample_form_widget = None
        if hasattr(parent_controller, 'schema_form_widget') and parent_controller.schema_form_widget:
            safe_remove_widget(layout, parent_controller.schema_form_widget)
            parent_controller.schema_form_widget = None

        # --- „Éá„Éº„Çø„Çª„ÉÉ„ÉàÊÉÖÂ†±ÂèñÂæó ---
        dataset_item = combo.itemData(idx, 0x0100)
        if not (dataset_item and hasattr(dataset_item, 'get')):
            return
        dataset_id = dataset_item.get('id', '')
        dataset_json_path = get_dynamic_file_path(f'output/rde/data/datasets/{dataset_id}.json')
        if not os.path.exists(dataset_json_path):
            QMessageBox.warning(widget, "„Ç®„É©„Éº", f"„Éá„Éº„Çø„Çª„ÉÉ„Éà„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: {dataset_json_path}")
            return
        with open(dataset_json_path, 'r', encoding='utf-8') as f:
            dataset_data = json.load(f)
            relationships = dataset_data.get("data",{}).get('relationships', {})
            group = relationships.get('group', {}).get('data', {})
            group_id = group.get('id', '')

        # --- Ë©¶Êñô„Éï„Ç©„Éº„É†ÁîüÊàêÔºàÂ∏∏„Å´3Áï™ÁõÆ„Å´ÊåøÂÖ•Ôºâ ---
        try:
            parent_controller.sample_form_widget = create_sample_form(widget, group_id, parent_controller)
            if parent_controller.sample_form_widget:
                # „Éá„Éº„Çø„Çª„ÉÉ„ÉàÈÅ∏Êäû(0), „Éâ„É≠„ÉÉ„Éó„ÉÄ„Ç¶„É≥(1), Âü∫Êú¨ÊÉÖÂ†±(2)„ÅÆÊ¨°„Å´ÊåøÂÖ•
                layout.insertWidget(3, parent_controller.sample_form_widget)
                parent_controller.sample_form_widget.setVisible(True)
                parent_controller.sample_form_widget.update()
                widget.update()
        except Exception as form_error:
            print(f"[ERROR] Ë©¶Êñô„Éï„Ç©„Éº„É†‰ΩúÊàê„Ç®„É©„Éº: {form_error}")
            import traceback
            traceback.print_exc()
            parent_controller.sample_form_widget = None

        # --- Âõ∫ÊúâÊÉÖÂ†±„Éï„Ç©„Éº„É†ÁîüÊàêÔºàÂ∏∏„Å´4Áï™ÁõÆ„Å´ÊåøÂÖ•Ôºâ ---
        template_id = ''
        instrument_id = ''
        invoice_schema_exists = ''
        template = relationships.get('template', {}).get('data', {})
        if isinstance(template, dict):
            template_id = template.get('id', '')
        instruments = relationships.get('instruments', {}).get('data', [])
        if isinstance(instruments, list) and len(instruments) > 0 and isinstance(instruments[0], dict):
            instrument_id = instruments[0].get('id', '')
        invoice_schema_path = None
        if template_id:
            invoice_schema_path = get_dynamic_file_path(f'output/rde/data/invoiceSchemas/{template_id}.json')
            invoice_schema_exists = '„ÅÇ„Çä' if os.path.exists(invoice_schema_path) else '„Å™„Åó'
        else:
            invoice_schema_exists = '„ÉÜ„É≥„Éó„É¨„Éº„ÉàID„Å™„Åó'
        if invoice_schema_exists == '„ÅÇ„Çä' and invoice_schema_path:
            form = create_schema_form_from_path(invoice_schema_path, widget)
            if form:
                layout.insertWidget(4, form)
                schema_form_widget = form
                parent_controller.schema_form_widget = schema_form_widget
                form.setVisible(True)
                widget.setVisible(True)
                widget.update()
                layout.update()
                widget.repaint()
                def safe_show_schema_form():
                    if hasattr(parent_controller, 'schema_form_widget') and parent_controller.schema_form_widget is not None:
                        try:
                            parent_controller.schema_form_widget.setVisible(True)
                        except RuntimeError:
                            pass
                def safe_update_widget_schema():
                    try:
                        widget.update()
                    except RuntimeError:
                        pass
                QTimer.singleShot(100, safe_show_schema_form)
                QTimer.singleShot(100, safe_update_widget_schema)
                for child in form.findChildren((QLineEdit, QComboBox)):
                    name = child.objectName() or child.placeholderText() or child.__class__.__name__
                    safe_name = f"schema_{name}".replace(' ', '_').replace('Ôºà', '').replace('Ôºâ', '')
                    setattr(parent_controller, safe_name, child)



    combo.currentIndexChanged.connect(on_dataset_changed)

    # „Éï„Ç°„Ç§„É´ÈÅ∏Êäû„ÉªÁôªÈå≤ÂÆüË°å„Éú„Çø„É≥„ÇíÂàÜÈõ¢
    btn_layout = QHBoxLayout()
    btn_layout.setSpacing(15)  # „Éú„Çø„É≥ÈñìÈöî„ÇíÂ∫É„Åí„Çã


    # „Éï„Ç°„Ç§„É´ÈÅ∏Êäû„Éú„Çø„É≥
    button_file_select_text = "üìÅ „Éï„Ç°„Ç§„É´ÈÅ∏Êäû(Êú™ÈÅ∏Êäû)"
    button_file_select = parent_controller.create_auto_resize_button(
        button_file_select_text, 220, 45, button_style
    )
    button_file_select.clicked.connect(parent_controller.on_file_select_clicked)
    parent_controller.file_select_button = button_file_select
    btn_layout.addWidget(button_file_select)

    # ÁôªÈå≤ÂÆüË°å„Éú„Çø„É≥
    button_register_exec_text = f"üöÄ {title}"
    button_register_exec = parent_controller.create_auto_resize_button(
        button_register_exec_text, 220, 45, button_style
    )
    button_register_exec.clicked.connect(parent_controller.on_register_exec_clicked)
    button_register_exec.setEnabled(False)  # ÂàùÊúüÁä∂ÊÖã„ÅØÁÑ°Âäπ
    parent_controller.register_exec_button = button_register_exec
    btn_layout.addWidget(button_register_exec)

    # „Éï„Ç°„Ç§„É´ÈÅ∏ÊäûÁä∂ÊÖã„Å´Âøú„Åò„Å¶ÁôªÈå≤ÂÆüË°å„Éú„Çø„É≥„ÅÆÊúâÂäπ/ÁÑ°Âäπ„ÇíÂàá„ÇäÊõø„Åà„Çã
    def update_register_button_state():
        # ÂøÖÈ†àÈ†ÖÁõÆÔºà„Éá„Éº„ÇøÂêç„ÄÅ„Éï„Ç°„Ç§„É´ÈÅ∏ÊäûÔºâ„Åå„Åô„Åπ„Å¶ÂÖ•ÂäõÊ∏à„Åø„ÅãÂà§ÂÆöÔºàÊ∑ª‰ªò„Éï„Ç°„Ç§„É´„ÅØÂà§ÂÆö„Å´‰Ωø„Çè„Å™„ÅÑÔºâ
        files = getattr(parent_controller, 'selected_register_files', [])
        file_selected = bool(files)
        data_name = getattr(parent_controller, 'data_name_input', None)
        data_name_filled = data_name and data_name.text().strip() != ""
        # QPushButton„ÅåÊó¢„Å´ÂâäÈô§Ê∏à„Åø„ÅÆÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
        try:
            if button_register_exec is not None and button_register_exec.parent() is not None:
                if file_selected and data_name_filled:
                    button_register_exec.setEnabled(True)
                else:
                    button_register_exec.setEnabled(False)
        except RuntimeError:
            # Êó¢„Å´ÂâäÈô§Ê∏à„Åø„ÅÆÂ†¥Âêà„ÅØÁÑ°Ë¶ñ
            pass

    # „Éá„Éº„ÇøÂêçÂÖ•ÂäõÊôÇ„Å´„ÇÇÁä∂ÊÖãÊõ¥Êñ∞
    if hasattr(parent_controller, 'data_name_input'):
        parent_controller.data_name_input.textChanged.connect(lambda: update_register_button_state())

    # „Éï„Ç°„Ç§„É´ÈÅ∏ÊäûÊôÇ„Å´Âëº„Å∞„Çå„Çã„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÅßÁä∂ÊÖãÊõ¥Êñ∞
    if hasattr(parent_controller, 'on_file_select_clicked'):
        orig_file_select = parent_controller.on_file_select_clicked
        def wrapped_file_select():
            result = orig_file_select()
            update_register_button_state()
            return result
        parent_controller.on_file_select_clicked = wrapped_file_select
        button_file_select.clicked.disconnect()
        button_file_select.clicked.connect(parent_controller.on_file_select_clicked)

    # ÂàùÊúüÁä∂ÊÖã„ÇÇÂèçÊò†
    update_register_button_state()

    # Ê∑ª‰ªò„Éï„Ç°„Ç§„É´ÈÅ∏Êäû„Éú„Çø„É≥ÔºàÊúâÂäπ„ÉªÁÑ°ÂäπÂà§ÂÆö„Åã„ÇâÈô§Â§ñÔºâ
    button_attachment_file_select_text = "üìé Ê∑ª‰ªò„Éï„Ç°„Ç§„É´ÈÅ∏Êäû(Êú™ÈÅ∏Êäû)"
    button_attachment_file_select = parent_controller.create_auto_resize_button(
        button_attachment_file_select_text, 220, 45, button_style
    )
    button_attachment_file_select.clicked.connect(parent_controller.on_attachment_file_select_clicked)
    parent_controller.attachment_file_select_button = button_attachment_file_select
    btn_layout.addWidget(button_attachment_file_select)

    layout.addLayout(btn_layout)

    # ÊúÄÂæå„Å´Stretch„ÇíËøΩÂä†
    layout.addStretch()
    widget.setLayout(layout)
    
    # „É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥ÂØæÂøú
    widget.setMinimumWidth(600)  # ÊúÄÂ∞èÂπÖË®≠ÂÆö
    widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
    
    # „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„ÇíÁ¢∫ÂÆü„Å´Ë°®Á§∫
    widget.setVisible(True)
    # widget.show()  # ÂâäÈô§ - „Åì„Çå„Åå„É°„Ç§„É≥„Ç¶„Ç£„É≥„Éâ„Ç¶„Åã„ÇâÂàÜÈõ¢„Åô„ÇãÂéüÂõ†
    
    return widget

def create_basic_info_group():
    """
    „Éá„Éº„ÇøÂêç„ÄÅ„Éá„Éº„ÇøË™¨Êòé„ÄÅÂÆüÈ®ìID„ÄÅÂèÇËÄÉURL,„Çø„Ç∞„ÇíÂü∫Êú¨ÊÉÖÂ†±„Å®„Åó„Å¶
    „Éï„Ç£„Éº„É´„Éâ„Çª„ÉÉ„Éà(QGroupBox)ÔºãLEGEND(„Çø„Ç§„Éà„É´)‰ªò„Åç„Åß„Ç∞„É´„Éº„Éî„É≥„Ç∞„Åó„ÄÅÂõ∫ÊúâÊÉÖÂ†±„Å®ÂêåÊßò„ÅÆÊ®™‰∏¶„Å≥„Çπ„Çø„Ç§„É´„ÅßËøî„Åô
    """
    group_box = QGroupBox("Âü∫Êú¨ÊÉÖÂ†±")
    group_box.setStyleSheet(DATA_REGISTER_FORM_STYLE)
    layout = QVBoxLayout(group_box)
    layout.setContentsMargins(12, 12, 12, 12)
    layout.setSpacing(10)

    row_style = """
        QLabel {
            font-weight: 600;
            min-width: 120px;
            color: #495057;
            padding: 2px 0;
        }
        QLineEdit, QTextEdit {
            border: 2px solid #e9ecef;
            border-radius: 3px;
            padding: 2px 3px;
            font-size: 10pt;
            background-color: white;
        }
        QLineEdit:focus, QTextEdit:focus {
            border-color: #2196f3;
            outline: none;
        }
        QLineEdit::placeholder, QTextEdit::placeholder {
            color: #28a745;
            font-style: italic;
        }
    """

    # „Éá„Éº„ÇøÂêç
    name_row = QHBoxLayout()
    name_label = QLabel("„Éá„Éº„ÇøÂêç *")
    name_label.setStyleSheet("font-weight: bold; min-width: 120px; color: #d32f2f;")
    name_input = QLineEdit()
    name_input.setPlaceholderText("„Éá„Éº„ÇøÂêçÔºàÂøÖÈ†àÔºâ")
    name_input.setMinimumHeight(24)
    name_input.setStyleSheet(row_style)
    name_row.addWidget(name_label)
    name_row.addWidget(name_input)
    layout.addLayout(name_row)

    # „Éá„Éº„ÇøË™¨Êòé
    desc_row = QHBoxLayout()
    desc_label = QLabel("„Éá„Éº„ÇøË™¨Êòé")
    desc_label.setStyleSheet("font-weight: bold; min-width: 120px; color: #495057;")
    desc_input = QTextEdit()
    desc_input.setMinimumHeight(32)
    desc_input.setMaximumHeight(48)
    desc_input.setPlaceholderText("„Éá„Éº„ÇøË™¨Êòé")
    desc_input.setStyleSheet(row_style)
    desc_row.addWidget(desc_label)
    desc_row.addWidget(desc_input)
    layout.addLayout(desc_row)

    # ÂÆüÈ®ìID
    expid_row = QHBoxLayout()
    expid_label = QLabel("ÂÆüÈ®ìID")
    expid_label.setStyleSheet("font-weight: bold; min-width: 120px; color: #495057;")
    expid_input = QLineEdit()
    expid_input.setPlaceholderText("ÂÆüÈ®ìIDÔºàÂçäËßíËã±Êï∞Ë®òÂè∑„ÅÆ„ÅøÔºâ")
    expid_input.setMinimumHeight(24)
    expid_input.setStyleSheet(row_style)
    expid_row.addWidget(expid_label)
    expid_row.addWidget(expid_input)
    layout.addLayout(expid_row)

    # ÂèÇËÄÉURL
    url_row = QHBoxLayout()
    url_label = QLabel("ÂèÇËÄÉURL")
    url_label.setStyleSheet("font-weight: bold; min-width: 120px; color: #495057;")
    url_input = QLineEdit()
    url_input.setPlaceholderText("ÂèÇËÄÉURL")
    url_input.setMinimumHeight(24)
    url_input.setStyleSheet(row_style)
    url_row.addWidget(url_label)
    url_row.addWidget(url_input)
    layout.addLayout(url_row)

    # „Çø„Ç∞
    tag_row = QHBoxLayout()
    tag_label = QLabel("„Çø„Ç∞(„Ç´„É≥„ÉûÂå∫Âàá„Çä)")
    tag_label.setStyleSheet("font-weight: bold; min-width: 120px; color: #495057;")
    tag_input = QLineEdit()
    tag_input.setPlaceholderText("„Çø„Ç∞(„Ç´„É≥„ÉûÂå∫Âàá„Çä)")
    tag_input.setMinimumHeight(24)
    tag_input.setStyleSheet(row_style)
    tag_row.addWidget(tag_label)
    tag_row.addWidget(tag_input)
    layout.addLayout(tag_row)

    widgets = {
        "data_name": name_input,
        "data_desc": desc_input,
        "exp_id": expid_input,
        "url": url_input,
        "tags": tag_input
    }
    return group_box, widgets

# Ë£úÂä©Èñ¢Êï∞: „Éá„Éº„ÇøË™¨ÊòéÊ¨Ñ„ÅÆÂÄ§ÂèñÂæó
def get_data_desc_value(desc_input):
    # QTextEdit„ÅÆÂ†¥Âêà„ÅØtoPlainText()„ÄÅQLineEdit„ÅÆÂ†¥Âêà„ÅØtext()
    if hasattr(desc_input, 'toPlainText'):
        return desc_input.toPlainText()
    return desc_input.text()
